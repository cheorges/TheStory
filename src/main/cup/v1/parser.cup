package v1;

import java_cup.runtime.*;
import java.util.ArrayList;
import ch.cheorges.instruction.*;
import ch.cheorges.instruction.flow.*;
import ch.cheorges.instruction.type.*;
import ch.cheorges.instruction.variable.*;
import ch.cheorges.instruction.math.*;
import ch.cheorges.instruction.condition.*;
import ch.cheorges.instruction.loop.*;

class Parser;

terminal    String STRING_LITERAL;
terminal    String IDENTIFIER;
terminal    String PREFIX;
terminal    String NUMBER;
terminal    Boolean TRUE, FALSE;

terminal    LET, PUT, INTO, BE, NOW, WILL_BE, IF, ELSE, WHILE;
terminal    ADD, SUB, MUL, DIV;
terminal    GE, LE, GEQ, LEQ, EQ, NOT_EQ;
terminal    BLOCK_TERMINATOR;

non terminal    Instruction program;
non terminal    ArrayList<Instruction> instructions;
non terminal    Instruction block;
non terminal    String identifier;
non terminal    Instruction assigment;
non terminal    Instruction value;
non terminal    Instruction operation;
non terminal    Instruction condition;
non terminal    Instruction conditional;
non terminal    ComparatorOperator comparator;
non terminal    Instruction bool;
non terminal    MathOperator operator;
non terminal    Instruction loop;

precedence left DIV, SUB, ADD, MUL, GE, LE, GEQ, LEQ, EQ, NOT_EQ;

start with program;

program         ::= instructions:i {: RESULT = new ProgramInstruction(i); :};

instructions    ::= {: RESULT = new ArrayList<Instruction>(); :}
                  | instructions:i assigment:a {: RESULT = i; RESULT.add(a); :}
                  | instructions:i conditional:c {: RESULT = i; RESULT.add(c); :}
                  | instructions:i loop:l {: RESULT = i; RESULT.add(l); :}
                  ;

block           ::= program:p {: RESULT = p; :};

assigment       ::= PUT value:v INTO identifier:i {: RESULT = new SetVariableInstruction(i, v); :}
                  | LET identifier:i BE value:v {: RESULT = new SetVariableInstruction(i, v); :}
                  | NOW identifier:i WILL_BE value:v {: RESULT = new SetVariableInstruction(i, v); :}
                  ;

identifier      ::= IDENTIFIER:i {: RESULT = i; :}
                  | identifier:i1 IDENTIFIER:i2 {: RESULT = i1 + i2; :}
                  | PREFIX:p IDENTIFIER:i {: RESULT = p + i; :}
                  ;

value           ::= NUMBER:n {: RESULT = new NumberInstruction(n); :}
                  | STRING_LITERAL:s {: RESULT = new StringLiteralInstruction(s); :}
                  | operation:o {: RESULT = o; :}
                  | condition:c {: RESULT = c; :}
                  ;

bool            ::= TRUE:b {: RESULT = new BooleanInstruction(b); :}
                  | FALSE:b {: RESULT = new BooleanInstruction(b); :}
                  ;

operation       ::= value:l operator:o value:r {: RESULT = new MathOperationInstruction(l, r, o); :};

operator        ::= ADD {: RESULT = MathOperator.ADD; :}
                  | SUB {: RESULT = MathOperator.SUB; :}
                  | MUL {: RESULT = MathOperator.MUL; :}
                  | DIV {: RESULT = MathOperator.DIV; :}
                  ;

condition       ::= value:l comparator:c value:r {: RESULT = new BooleanConditionInstruction(l, r, c); :}
                  | bool:b {: RESULT = b; :}
                  | identifier:i {: RESULT = new GetVariableInstruction(i); :}
                  ;

comparator      ::= GE {: RESULT = ComparatorOperator.GE; :}
                  | LE {: RESULT = ComparatorOperator.LE; :}
                  | GEQ {: RESULT = ComparatorOperator.GEQ; :}
                  | LEQ {: RESULT = ComparatorOperator.LEQ; :}
                  | EQ {: RESULT = ComparatorOperator.EQ; :}
                  | NOT_EQ {: RESULT = ComparatorOperator.NOT_EQ; :}
                  ;

conditional     ::= IF condition:c block:b BLOCK_TERMINATOR {: RESULT = new ConditionalInstruction(c, b); :}
                  | IF condition:c block:b1 ELSE block:b2 BLOCK_TERMINATOR {: RESULT = new ConditionalInstruction(c, b1, b2); :}
                  ;

loop            ::= WHILE condition:c block:b BLOCK_TERMINATOR {: RESULT = new LoopInstruction(c, b); :};
